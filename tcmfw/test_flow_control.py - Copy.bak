# -*- coding: utf-8 -*-
# The MIT License
#
# Copyright (c) 2018 Aaron Greenyer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
    test_flow_control.py
    ~~~~~~~~~~~

    Module to provide test flow control for the TCM application.

    :copyright: 2018 by Aaron Greenyer
    :license: MIT, see COPYING for more details.
"""

import os
import time
import glob
from tqdm import tqdm
import signal
from loguru import logger


class FlowControl:
    def __init__(self):
        # flag files in local directory:
        signal.signal(signal.SIGINT, self.signal_handler)
        self.stopFile     = 'stop.txt'      # stop now
        self.stopNextFile = 'stopNext.txt'  # stop before next test
        self.stopLastFile = 'stopLast.txt'  # stop after last test in current set of tests 
        self.pauseFile    = 'pause.txt'     # pause
        self.updateStatus = ''              # status message container
        self.flag_dict = {'stop.txt': self.stop,
                          'stopNext.txt': self.stop,
                          'stopLast.txt': self.stop, 
                          'pause.txt': self.stop}

        logger.debug('delete all flag files in local directory')
        for flag_file in [self.stopFile, self.stopNextFile, self.stopLastFile, self.pauseFile]:
            try:
                os.remove(flag_file)
                logger.debug(f'{flag_file} removed')
            except:
                pass

    def signal_handler(self, signal_name, frame):
        print('Press Ctrl+C')

    def update_info(self, field, info):
        '''
        This function writes data into the commsfile.txt file so that the gui can pick it up and display it.
        The first argument is the field to be updated, the second line is the actual data. Both args are strings.
        valid field types are: 'text', 
        '''
        std = self.common['STD']       
        fileid = open("commsfile.txt", 'w')
        fileid.write(field + "\n")
        fileid.write(std + ' ' + info)
        fileid.close()
        
    def delay(self, s):
        '''delays the script for s seconds'''
        if s == 0:
            pass
        elif s <= 4:
            time.sleep(s)
        elif s > 4:
            # logger.info(f'delay for {s} seconds')
            for t in range(0, s):# tqdm()
                self.poll_status()
                #print(f'{chr(9608)*(s-t):{chr(9702)}<{s}}', end = '\r')
                logger.opt(raw=True).info(f"Delay for {s} seconds: {s-t:02d}\r")
                time.sleep(1)
            # logger.opt(raw=True).info('\n')
        return

    def loop(self):
        print(' '*100, end = '\r')
        for x in range(0, 80):
            self.poll_status()
            print(f'{chr(9608)*x}', end = '\r')
            time.sleep(0.05)
        for x in range(0, 80):
            self.poll_status()
            print(f'{" "*x}', end = '\r')
            time.sleep(0.05)
        print(' ' * 100, end='\r')

    def skip_delay(self):
        raise NotImplementedError

    def pause(self):
        raise NotImplementedError

    def pause_for_user_input(self):
        raise NotImplementedError

    def stop(self):
        raise Exception("test_stopped")
    
    def shutdown(self):
        raise Exception("test_stopped")
    
    def poll_status(self):
        flag_files = []
        for file_name in glob.glob(f'{os.getcwd()}/*.txt'):
            flag_files.append(os.path.basename(file_name))

        for flag in flag_files:
            if self.flag_dict.get(flag):
                self.flag_dict[flag]()
